Index: dev/src/Employees/business_layer/facade/ShiftService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Employees.business_layer.facade;\r\n\r\nimport Employees.EmployeeException;\r\nimport Employees.business_layer.Employee.EmployeeController;\r\nimport Employees.business_layer.Employee.Role;\r\nimport Employees.business_layer.Shift.Shift;\r\nimport Employees.business_layer.Shift.ShiftController;\r\nimport Employees.business_layer.Shift.ShiftTypes;\r\nimport Employees.business_layer.Shift.WeeklyShiftSchedule;\r\nimport Employees.business_layer.facade.facadeObject.FacadeShift;\r\nimport Employees.business_layer.facade.facadeObject.FacadeWeeklyShiftSchedule;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class ShiftService {\r\n    private ShiftController shiftController;\r\n\r\n    public ShiftService()\r\n    {\r\n        shiftController = ShiftController.getInstance ();\r\n    }\r\n\r\n    public ResponseT<FacadeWeeklyShiftSchedule> getRecommendation(LocalDate startingDate) {\r\n        try {\r\n            WeeklyShiftSchedule weeklyShiftSchedule = shiftController.getRecommendation ( startingDate );\r\n            FacadeWeeklyShiftSchedule facadeWeeklyShiftSchedule = new FacadeWeeklyShiftSchedule ( weeklyShiftSchedule );\r\n            return new ResponseT<> ( facadeWeeklyShiftSchedule );\r\n        } catch (EmployeeException e)\r\n        {\r\n            return new ResponseT(e.getMessage ());\r\n        }\r\n    }\r\n\r\n    public ResponseT<FacadeWeeklyShiftSchedule> createWeeklyShiftSchedule(LocalDate startingDate, FacadeShift[][] shifts)\r\n    {\r\n        try{\r\n            Shift[][] newShifts = new Shift[7][2];\r\n            for ( int i = 0; i < 7; i ++ )\r\n            {\r\n                FacadeShift morning = shifts[i][0];\r\n                FacadeShift evening = shifts[i][1];\r\n                if(morning != null) {\r\n                    checkManningValidityRole(newShifts[i][0].getManning ());\r\n                    checkConstraintRole ( newShifts[i][0].getManning (), startingDate.plusDays ( i ), 0 );\r\n                    newShifts[i][0] = new Shift ( morning );\r\n                }\r\n                if(evening != null) {\r\n                    checkManningValidityRole(newShifts[i][1].getManning ());\r\n                    checkConstraintRole ( newShifts[i][0].getManning (), startingDate.plusDays ( i ), 1 );\r\n                    newShifts[i][1] = new Shift ( evening );\r\n                }\r\n            }\r\n            FacadeWeeklyShiftSchedule facadeWeeklyShiftSchedule = new FacadeWeeklyShiftSchedule (shiftController.createWeeklyShiftSchedule ( startingDate, newShifts ));\r\n            return new ResponseT ( facadeWeeklyShiftSchedule );\r\n        }catch (EmployeeException e){\r\n            return new ResponseT ( e.getMessage () );\r\n        }\r\n    }\r\n\r\n    private void checkManningValidityRole(HashMap<Role, List<String>> manning) throws EmployeeException {\r\n        for( Map.Entry<Role, List<String>> entry : manning.entrySet () ){\r\n            for(String emp : entry.getValue ())\r\n                if(!EmployeeController.getInstance ().isExist ( entry.getKey ().name (), emp ))\r\n                    throw new EmployeeException ( emp + \" and role \" + entry.getKey ().name () + \" does not exist in system\" );\r\n        }\r\n    }\r\n\r\n    private void checkConstraintRole(HashMap<Role, List<String>> manning, LocalDate date, int shift) throws EmployeeException {\r\n        for ( Map.Entry<Role, List<String>> entry : manning.entrySet ( ) ) {\r\n            for ( String ID : entry.getValue ( ) ) {\r\n                if (EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).containsKey ( date ) &&\r\n                        EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).get ( date ).isMorningShift ( ) && shift == 0)\r\n                    throw new EmployeeException ( \"Employee is unavailable.\" );\r\n                if (EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).containsKey ( date ) &&\r\n                        EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).get ( date ).isEveningShift ( ) && shift == 1)\r\n                    throw new EmployeeException ( \"Employee is unavailable.\" );\r\n            }\r\n        }\r\n    }\r\n\r\n    private void checkConstraint(HashMap<String, List<String>> manning, LocalDate date, int shift) throws EmployeeException {\r\n        for ( Map.Entry<String, List<String>> entry : manning.entrySet ( ) ) {\r\n            for ( String ID : entry.getValue ( ) ) {\r\n                if (EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).containsKey ( date ) &&\r\n                        EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).get ( date ).isMorningShift ( ) && shift == 0)\r\n                    throw new EmployeeException ( \"Employee is unavailable.\" );\r\n                if (EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).containsKey ( date ) &&\r\n                        EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).get ( date ).isEveningShift ( ) && shift == 1)\r\n                    throw new EmployeeException ( \"Employee is unavailable.\" );\r\n            }\r\n        }\r\n    }\r\n\r\n    private void checkManningValidity(HashMap<String, List<String>> manning) throws EmployeeException {\r\n        for( Map.Entry<String, List<String>> entry : manning.entrySet () ){\r\n            for(String emp : entry.getValue ())\r\n                if(!EmployeeController.getInstance ().isExist ( entry.getKey (), emp ))\r\n                    throw new EmployeeException ( emp + \" and role \" + entry.getKey () + \" does not exist in system\" );\r\n        }\r\n    }\r\n\r\n    public Response changeShift(LocalDate date, int shift, HashMap<String, List<String>> manning) {\r\n        try {\r\n            checkManningValidity(manning);\r\n            checkConstraint ( manning, date, shift );\r\n            shiftController.changeShift ( date, shift, manning );\r\n            return new Response (  );\r\n        }catch (EmployeeException e)\r\n        {\r\n            return new Response ( e.getMessage () );\r\n        }\r\n    }\r\n\r\n    public Response addEmployeeToShift(String role, String ID, LocalDate date, int shift) {\r\n        try {\r\n            shiftController.addEmployeeToShift ( role, ID, date, shift );\r\n            return new Response ( );\r\n        } catch (EmployeeException e) {\r\n            return new Response ( e.getMessage ( ) );\r\n        }\r\n    }\r\n\r\n    public Response deleteEmployeeFromShift(String role, String ID, LocalDate date, int shift)  {\r\n        try {\r\n            shiftController.deleteEmployeeFromShift ( role, ID, date, shift );\r\n            return new Response (  );\r\n        }catch (EmployeeException e)\r\n        {\r\n            return new Response ( e.getMessage () );\r\n        }\r\n    }\r\n\r\n    public Response changeShiftType(LocalDate date, int shift, String shiftType) {\r\n        try {\r\n            shiftController.changeShiftType ( date, shift, shiftType);\r\n            return new Response (  );\r\n        }catch (EmployeeException e)\r\n        {\r\n            return new Response ( e.getMessage () );\r\n        }\r\n    }\r\n\r\n    public Response createShiftType(String shiftype, HashMap<String, Integer> manning){\r\n        try {\r\n            shiftController.createShiftType ( shiftype, manning );\r\n            return new Response (  );\r\n        }catch (EmployeeException e)\r\n        {\r\n            return new Response ( e.getMessage () );\r\n        }\r\n    }\r\n\r\n    public Response updateRoleManning(String shiftType, String role, int num) {\r\n        try {\r\n            shiftController.updateRoleManning ( shiftType, role, num );\r\n            return new Response (  );\r\n        }catch (EmployeeException e)\r\n        {\r\n            return new Response ( e.getMessage () );\r\n        }\r\n    }\r\n\r\n    public Response addRoleManning(String shiftType, String role, int num) {\r\n        try {\r\n            shiftController.addRoleManning ( shiftType, role, num );\r\n            return new Response (  );\r\n        }catch (EmployeeException e)\r\n        {\r\n            return new Response ( e.getMessage () );\r\n        }\r\n    }\r\n\r\n    public ResponseT<FacadeWeeklyShiftSchedule> getWeeklyShiftSchedule(LocalDate date) {\r\n        try {\r\n            FacadeWeeklyShiftSchedule facadeWeeklyShiftSchedule = new FacadeWeeklyShiftSchedule ( shiftController.getWeeklyShiftSchedule(date) );\r\n            return new ResponseT ( facadeWeeklyShiftSchedule );\r\n        }catch (EmployeeException e)\r\n        {\r\n            return new ResponseT ( e.getMessage () );\r\n        }\r\n    }\r\n\r\n    public ResponseT<FacadeShift> getShift(LocalDate date, int shift) {\r\n        try {\r\n            Shift s = shiftController.getShift ( date, shift );\r\n            return new ResponseT (  new FacadeShift ( s ) );\r\n        } catch (EmployeeException e){\r\n            return new ResponseT ( e.getMessage () );\r\n        }\r\n    }\r\n\r\n    public ResponseT<HashMap<Role, Integer>> getShiftTypeManning(String shiftType) {\r\n        try{\r\n            HashMap<Role, Integer> manning = ShiftTypes.getInstance ().getShiftTypeManning ( shiftType );\r\n            return new ResponseT ( manning );\r\n        }catch (EmployeeException e){\r\n            return new ResponseT ( e.getMessage () );\r\n        }\r\n    }\r\n\r\n    public Response deleteRoleFromShiftType(String shiftType, String role) {\r\n        try {\r\n            shiftController.deleteRoleFromShiftType(shiftType, role);\r\n            return new Response (  );\r\n        }catch (EmployeeException e)\r\n        {\r\n            return new Response ( e.getMessage () );\r\n        }\r\n    }\r\n\r\n    public Response createData() {\r\n        try {\r\n            shiftController.createData ( );\r\n            return new Response (  );\r\n        } catch (EmployeeException e) {\r\n            return new Response ( e.getMessage ( ) );\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dev/src/Employees/business_layer/facade/ShiftService.java b/dev/src/Employees/business_layer/facade/ShiftService.java
--- a/dev/src/Employees/business_layer/facade/ShiftService.java	(revision aaf441857b94e8fc55020b14ca6e477686c8abde)
+++ b/dev/src/Employees/business_layer/facade/ShiftService.java	(date 1619099468432)
@@ -68,31 +68,7 @@
         }
     }
 
-    private void checkConstraintRole(HashMap<Role, List<String>> manning, LocalDate date, int shift) throws EmployeeException {
-        for ( Map.Entry<Role, List<String>> entry : manning.entrySet ( ) ) {
-            for ( String ID : entry.getValue ( ) ) {
-                if (EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).containsKey ( date ) &&
-                        EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).get ( date ).isMorningShift ( ) && shift == 0)
-                    throw new EmployeeException ( "Employee is unavailable." );
-                if (EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).containsKey ( date ) &&
-                        EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).get ( date ).isEveningShift ( ) && shift == 1)
-                    throw new EmployeeException ( "Employee is unavailable." );
-            }
-        }
-    }
 
-    private void checkConstraint(HashMap<String, List<String>> manning, LocalDate date, int shift) throws EmployeeException {
-        for ( Map.Entry<String, List<String>> entry : manning.entrySet ( ) ) {
-            for ( String ID : entry.getValue ( ) ) {
-                if (EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).containsKey ( date ) &&
-                        EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).get ( date ).isMorningShift ( ) && shift == 0)
-                    throw new EmployeeException ( "Employee is unavailable." );
-                if (EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).containsKey ( date ) &&
-                        EmployeeController.getInstance ( ).getEmployee ( ID ).getConstraints ( ).get ( date ).isEveningShift ( ) && shift == 1)
-                    throw new EmployeeException ( "Employee is unavailable." );
-            }
-        }
-    }
 
     private void checkManningValidity(HashMap<String, List<String>> manning) throws EmployeeException {
         for( Map.Entry<String, List<String>> entry : manning.entrySet () ){
